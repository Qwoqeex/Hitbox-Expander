local libraryUrl = "https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/turtle"
local librarySuccess, library = pcall(loadstring, game:HttpGet(libraryUrl))
if not librarySuccess then
    error("Failed to load the library from URL: " .. libraryUrl)
end

-- Create the UI window for the Hitbox Expander
local OwO = library():Window("Hitbox Expander")

-- Global configuration variables (values stored are the actual ones after division by 10)
_G.HeadSize = 50 / 10    -- Default size: 5 (because 50 divided by 10)
_G.HeadTransparency = 0.7 -- Default transparency remains the same (0.7)
_G.HeadColor = Color3.fromRGB(255, 255, 255)
_G.Enabled = false

-- Table to store original properties of players' HumanoidRootParts
local originalProps = {}

-- Slider to control the head hitbox size.
-- The slider now works with values from 50 to 500 (step 10) and then divides by 10,
-- effectively letting the user choose a size from 5 to 50.
OwO:Slider("Size", 50, 500, 10, function(value)
    _G.HeadSize = value / 10
end)

-- Slider to control the hitbox transparency.
-- The slider values now range from 0 to 100 (step 1) and are divided by 10,
-- so that 0 becomes 0, 1 becomes 0.1, 2 becomes 0.2, etc.
OwO:Slider("Transparency", 0, 100, 1, function(value)
    _G.HeadTransparency = value / 100
end)

-- ColorPicker to control the hitbox color
OwO:ColorPicker("Color(Bug)", _G.HeadColor, function(color)
    _G.HeadColor = color
end)

-- Toggle to enable or disable the hitbox modifications
OwO:Toggle("Toggle", false, function(toggleEnabled)
    _G.Enabled = toggleEnabled
end)

-- Listen for the H key press to toggle the hitbox modifications
local UserInputService = game:GetService("UserInputService")
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if input.KeyCode == Enum.KeyCode.H then
        _G.Enabled = not _G.Enabled
    end
end)

-- Utility function to capture the original properties of a part
local function captureOriginalProps(hrp)
    return {
        Size = hrp.Size,
        Transparency = hrp.Transparency,
        BrickColor = hrp.BrickColor,
        Material = hrp.Material,
        CanCollide = hrp.CanCollide
    }
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- RenderStepped loop to update or revert hitbox modifications
RunService.RenderStepped:Connect(function()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local success, err = pcall(function()
                local character = player.Character
                local hrp = character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    if _G.Enabled then
                        -- Store the original properties if not already stored
                        if not originalProps[player.UserId] then
                            originalProps[player.UserId] = captureOriginalProps(hrp)
                        end
                        -- Apply hitbox modifications without altering other properties
                        hrp.Size = Vector3.new(_G.HeadSize, _G.HeadSize, _G.HeadSize)
                        hrp.Transparency = _G.HeadTransparency
                        hrp.Color = _G.HeadColor
                        hrp.Material = Enum.Material.Neon
                        hrp.CanCollide = false
                    else
                        -- Revert to original properties if they were stored
                        if originalProps[player.UserId] then
                            local props = originalProps[player.UserId]
                            hrp.Size = props.Size
                            hrp.Transparency = props.Transparency
                            hrp.BrickColor = props.BrickColor
                            hrp.Material = props.Material
                            hrp.CanCollide = props.CanCollide
                            originalProps[player.UserId] = nil
                        end
                    end
                end
            end)
            if not success then
                warn("Error processing player " .. player.Name .. ": " .. tostring(err))
            end
        end
    end
end)
